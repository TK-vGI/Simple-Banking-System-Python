############
# banking.py
############
from bank import Bank

def main():
    bank = Bank() # Create an instance of Bank
    # Menu
    while True:
        print("""1. Create an account
2. Log into account
0. Exit""")

        # User input
        usr = input()
        match usr:
            case '0':
                print("\nBye!")
                break

            case '1':
                bank.create_account()

            case '2':
                bank.log_in_account()

            case _:
                print('Invalid input!\n')



if __name__ == '__main__':
    main()


#########
# bank.py
#########
from account import Account
import sqlite3


class Bank:
    def __init__(self):
        self.conn = sqlite3.connect('card.s3db')
        self.cursor = self.conn.cursor()
        self._create_table()

    def _create_table(self):
        self.cursor.execute('''
                            CREATE TABLE IF NOT EXISTS card
                            (
                                id INTEGER PRIMARY KEY,
                                number TEXT,
                                pin TEXT,
                                balance INTEGER DEFAULT 0
                            );
                            ''')
        self.conn.commit()

    def create_account(self):
        account = Account()
        self.cursor.execute('INSERT INTO card (number, pin, balance) VALUES (?, ?, ?)',
                            (account.identifier, account.pin, account.balance))
        self.conn.commit()

        print(f"\nYour card has been created\nYour card number:\n{account.identifier}\nYour card PIN:\n{account.pin}\n")

    def log_in_account(self):
        print("\nEnter your account number:")
        identifier = input()
        print("Enter your PIN:")
        pin = input()

        self.cursor.execute('SELECT number, pin, balance FROM card WHERE number=? AND pin=?',
                            (identifier, pin))
        result = self.cursor.fetchone()
        # print(result) # fetchone returns tuple or None

        if result:
            print("\nYou have successfully logged in!\n")
            # Load account from database
            account = Account(identifier=result[0], pin=result[1], balance=result[2])
            self.logged_in_menu(account)
        else:
            print("\nWrong card number or PIN!\n")
        return None

    def logged_in_menu(self, account):
        while True:
            print("""1. Balance
2. Log out
0. Exit""")

            # print("Select an option: ")
            usr = input()
            match usr:
                case '0':
                    print("\nBye!")
                    exit()

                case '1':
                    print(f"\nBalance: {account.get_balance()}\n")

                case '2':
                    print("\nYou have successfully logged out!\n")
                    return  # Returns to the main menu

                case _:
                    print("Invalid input!")


############
# account.py
############
import random


class Account:
    def __init__(self, identifier=None, pin=None, balance=0):
        self.identifier = identifier or self._generate_identifier()
        self.pin = pin or self._generate_pin()
        self.balance = balance

    @staticmethod
    def _generate_identifier():
        while True:
            iin = '400000'
            ain = ''.join(str(random.randint(0, 9)) for _ in range(9))
            partial_identifier = iin + ain

            def luhn_algorithm(identifier):
                digits = [int(d) for d in identifier]  # Convert to integer list
                for i in range(len(digits) - 1, -1, -2):  # Double every second digit from the right
                    digits[i] *= 2
                    if digits[i] > 9:
                        digits[i] -= 9
                checksum = (10 - sum(digits) % 10) % 10  # Compute checksum
                return str(checksum)

            checksum = luhn_algorithm(partial_identifier)
            return partial_identifier + checksum

    @staticmethod
    def _generate_pin():
        return ''.join(str(random.randint(0, 9)) for _ in range(4))

    def get_balance(self):
        return self.balance

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"Deposited {amount}. New balance: {self.balance}")
        else:
            print("Invalid deposit amount.")

    def withdraw(self, amount):
        if 0 < amount <= self.balance:
            self.balance -= amount
            print(f"Withdrawn {amount}. Remaining balance: {self.balance}")
        else:
            print("Insufficient funds or invalid amount.")

############
# banking.py
############
from bank import Bank

def main():
    bank = Bank() # Create an instance of Bank
    # Menu
    while True:
        print("""1. Create an account
2. Log into account
0. Exit""")

        # User input
        usr = input()
        match usr:
            case '0':
                print("\nBye!")
                break

            case '1':
                bank.create_account()

            case '2':
                if bank.log_in_account(): # Check if exit was requested
                    break

            case _:
                print('Invalid input!\n')



if __name__ == '__main__':
    main()


#########
# bank.py
#########
from account import Account
import sqlite3


class Bank:
    def __init__(self):
        self.conn = sqlite3.connect('card.s3db')
        self.cursor = self.conn.cursor()
        self._create_table()

    def _create_table(self):
        self.cursor.execute('''
                            CREATE TABLE IF NOT EXISTS card
                            (
                                id INTEGER PRIMARY KEY,
                                number TEXT,
                                pin TEXT,
                                balance INTEGER DEFAULT 0
                            );
                            ''')
        self.conn.commit()

    def __del__(self):
        self.conn.close()

    def create_account(self):
        account = Account()
        self.cursor.execute('INSERT INTO card (number, pin, balance) VALUES (?, ?, ?)',
                            (account.identifier, account.pin, account.balance))
        self.conn.commit()

        print(f"\nYour card has been created\nYour card number:\n{account.identifier}\nYour card PIN:\n{account.pin}\n")

    @staticmethod
    def _check_luhn(number):
        digits = [int(d) for d in number]
        for i in range(0, len(digits), 2):  # Match Luhn algorithm
            digits[i] *= 2
            if digits[i] > 9:
                digits[i] -= 9
        return sum(digits) % 10 == 0

    def log_in_account(self):
        print("\nEnter your card number:")
        identifier = input()
        print("Enter your PIN:")
        pin = input()

        self.cursor.execute('SELECT number, pin, balance FROM card WHERE number=? AND pin=?',
                            (identifier, pin))
        result = self.cursor.fetchone()
        # print(result) # fetchone returns tuple or None

        if result:
            print("\nYou have successfully logged in!\n")
            # Load account from database
            account = Account(identifier=result[0], pin=result[1], balance=result[2])
            self.logged_in_menu(account)
        else:
            print("\nWrong card number or PIN!\n")
        return None

    def logged_in_menu(self, account):
        while True:
            print("""1. Balance
2. Add income
3. Do transfer
4. Close account
5. Log out
0. Exit""")

            # print("Select an option: ")
            usr = input()
            match usr:
                case '0':
                    print("\nBye!")
                    exit(0)

                case '1':
                    print(f"\nBalance: {account.get_balance(self.cursor)}\n")

                case '2':
                    try:
                        print("\nEnter income:")
                        income = int(input())
                        if income > 0:
                            account.deposit(income, self.cursor, self.conn)
                            self.cursor.execute(
                                "UPDATE card SET balance = ? WHERE number = ?",
                                (account.get_balance(), account.identifier)
                            )
                            self.conn.commit()
                            print("Income was added!\n")
                        else:
                            print("Income must be a positive integer.\n")
                    except ValueError:
                        print("Invalid input. Please enter a valid number.\n")

                case '3':
                    print("\nTransfer")
                    print("Enter card number:")
                    target_card = input()

                    # e2. Same card check
                    if target_card == account.identifier:
                        print("You can't transfer money to the same account!\n")
                        continue

                    # e3. Luhn check
                    if not self._check_luhn(target_card):
                        print("Probably you made a mistake in the card number. Please try again!\n")
                        continue

                    # e4. Check if target account exists
                    self.cursor.execute("SELECT balance FROM card WHERE number = ?", (target_card,))
                    recipient = self.cursor.fetchone()
                    if not recipient:
                        print("Such a card does not exist.\n")
                        continue

                    # Ask transfer amount
                    try:
                        print("Enter how much money you want to transfer:")
                        amount = int(input())
                        if amount > account.get_balance(self.cursor):
                            print("Not enough money!")
                        else:
                            # Proceed with transaction
                            self.cursor.execute("UPDATE card SET balance = balance - ? WHERE number = ?",
                                                (amount, account.identifier))
                            self.cursor.execute("UPDATE card SET balance = balance + ? WHERE number = ?",
                                                (amount, target_card))
                            self.conn.commit()
                            account.balance -= amount  # update in-memory object
                            print("Success!")
                    except ValueError:
                        print("Invalid amount.")


                case '4':
                    self.cursor.execute(
                        "DELETE FROM card WHERE number = ?",
                        (account.identifier,)
                    )
                    self.conn.commit()
                    print("\nThe account has been closed!\n")
                    return False  # Go back to main menu

                case '5':
                    print("\nYou have successfully logged out!\n")
                    return False  # Returns to the main menu

                case _:
                    print("Invalid input!")


############
# account.py
############
import random


class Account:
    def __init__(self, identifier=None, pin=None, balance=0):
        self.identifier = identifier or self._generate_identifier()
        self.pin = pin or self._generate_pin()
        self.balance = balance

    def __str__(self):
        return f"Account(number={self.identifier}, balance={self.balance})"

    @staticmethod
    def _generate_identifier():
        while True:
            iin = '400000'
            ain = ''.join(str(random.randint(0, 9)) for _ in range(9))
            partial_identifier = iin + ain

            def luhn_algorithm(identifier):
                digits = [int(d) for d in identifier]  # Convert to integer list
                for i in range(0, len(digits), 2):  # Double odd-positioned digits (0-based indices 0, 2, ..., 14)
                    digits[i] *= 2
                    if digits[i] > 9:
                        digits[i] -= 9
                checksum = (10 - sum(digits) % 10) % 10
                return str(checksum)

            checksum = luhn_algorithm(partial_identifier)
            return partial_identifier + checksum

    @staticmethod
    def _generate_pin():
        return ''.join(str(random.randint(0, 9)) for _ in range(4))

    def get_balance(self, cursor=None):
        if cursor:
            cursor.execute(
                "SELECT balance FROM card WHERE number = ?",
                (self.identifier,)
            )
            result = cursor.fetchone()
            if result:
                self.balance = result[0]
        return self.balance

    def deposit(self, amount, cursor=None, conn=None):
        if amount > 0:
            self.balance += amount
            if cursor and conn:
                cursor.execute(
                    "UPDATE card SET balance = ? WHERE number = ?",
                    (self.balance, self.identifier)
                )
                conn.commit()
            # print(f"Deposited {amount}. New balance: {self.balance}")
        else:
            raise ValueError("Invalid deposit amount.")

    def withdraw(self, amount):
        if 0 < amount <= self.balance:
            self.balance -= amount
        else:
            raise ValueError("Insufficient funds or invalid amount.")